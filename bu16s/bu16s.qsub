#!/bin/bash -l

#$ -P talbot-lab-data
#$ -j y

# Load modules and inputs
module load miniconda
conda activate qiime2-2020.2
source ../inputs.sh

# Single end if only FWD
if [ -z "$REV_FMT" ]
then
    PAIRED=false
else
    PAIRED=true
fi

# Output file locations
INTERMEDIATEDIR=$OUTPUTDIR/intermediate

# Show welcome
python $SCRIPTSDIR/welcome.py -i ../inputs.sh
echo
echo STARTING AT $(date)
echo

### 1) CREATE QIIME2 ARTIFACT
echo CREATING QIIME ARTIFACT
cmd="python $SCRIPTSDIR/generate_artifact.py -i $INPUTDIR -p $PROJECTNAME -f=$FWD_FMT -r=$REV_FMT -o $INTERMEDIATEDIR"
echo --------------------------------------------------------------------------------------
echo $cmd
echo --------------------------------------------------------------------------------------
echo
eval $cmd


demux_artifact=$INTERMEDIATEDIR/"$PROJECTNAME"_raw.qza
echo Saved QIIME artifact to: $demux_artifact
echo

### 2) Trim primers
echo TRIMMING PRIMERS
trim_output=$INTERMEDIATEDIR/"$PROJECTNAME"_trimmed.qza
if [ $PAIRED == "true" ]
then
    trim_setting="trim-paired"
    front_option="p-front-f"
    rev_option="p-front-r"
else
    trim_setting="trim-single"
    front_option="p-front"
    rev_option="p-anywhere"
fi

cmd="qiime cutadapt $trim_setting \
    --i-demultiplexed-sequences $demux_artifact \
    --$front_option $FWD_PRIMER \
    --$rev_option $REV_PRIMER \
    --p-error-rate 0.1 \
    --p-indels True \
    --p-times 2 \
    --p-overlap 3 \
    --p-match-read-wildcards True \
    --p-match-adapter-wildcards True \
    --p-minimum-length 50 \
    --p-cores $(nproc) \
    --verbose \
    --o-trimmed-sequences $trim_output"
echo --------------------------------------------------------------------------------------
echo $cmd
echo --------------------------------------------------------------------------------------
echo
eval $cmd
echo

### 3) Join reads
#if [ $PAIRED == "true" ]
#then
#    echo MERGING PAIRED READS
#    join_output=$OUTPUTDIR/joined.qza
#    cmd="qiime vsearch join-pairs \
#    --i-demultiplexed-seqs $trim_output \
#    --p-maxdiffs 200 \
#    --p-maxee 20 \
#    --p-minovlen 1 \
#    --p-allowmergestagger True \
#    --verbose \
#    --o-joined-sequences $join_output"
#    echo $cmd
#    eval $cmd
#fi

### 3) Generate ASVs
echo GENERATING ASVs
dada2_output=$INTERMEDIATEDIR/dada2
dada2_params="--i-demultiplexed-seqs $trim_output \
    --p-n-threads 0 \
    --verbose \
    --output-dir $dada2_output"
if [ $PAIRED == "true" ]
then
    cmd="qiime dada2 denoise-paired --p-trunc-len-f 200 --p-trunc-len-r 200 $dada2_params"
else
    cmd="qiime dada2 denoise-single --p-trunc-len 200 $dada2_params"
fi
echo --------------------------------------------------------------------------------------
echo $cmd
echo --------------------------------------------------------------------------------------
echo
eval $cmd

### 4) Classify
echo CLASSIFY ASVs
classification_output=$INTERMEDIATEDIR/"$PROJECTNAME"_SILVA99.qza
cmd="qiime feature-classifier classify-consensus-vsearch \
--i-query $dada2_output/representative_sequences.qza \
--i-reference-reads $SILVA_SEQUENCES \
--i-reference-taxonomy $SILVA_TAXONOMY \
--p-threads $(nproc) \
--p-top-hits-only True \
--p-perc-identity 0.95 \
--p-maxrejects 100 \
--p-maxaccepts all \
--verbose \
--o-classification $classification_output"
echo --------------------------------------------------------------------------------------
echo $cmd
echo --------------------------------------------------------------------------------------
eval $cmd

### 5) Export
echo EXTRACTING PROCESSED DATA
# Extract ASV table
qiime tools export --input-path $dada2_output/table.qza --output-path $OUTPUTDIR
mv $OUTPUTDIR/feature-table.biom $OUTPUTDIR/"$PROJECTNAME"_ASV.biom

# Extract taxonomy
qiime tools export --input-path $classification_output --output-path $OUTPUTDIR
mv $OUTPUTDIR/taxonomy.tsv $OUTPUTDIR/"$PROJECTNAME"_SILVA99.tsv

echo
echo PROCESSED DATA IS AVAILABLE AT $OUTPUTDIR
echo FINISHED AT $(date)
