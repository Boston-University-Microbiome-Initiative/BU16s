#!/bin/bash -l
# USAGE:
# Submit to SCC: qsub bu16s.qsub PATH/TO/PARAMETERFILE
# Local run: bash bu16s.qsub PATH/TO/PARAMETERFILE

#$ -P talbot-lab-data
#$ -j y
#$ -pe omp 16


# Load parameters
usage="# USAGE:\n
# Submit to SCC: qsub bu16s.qsub PATH/TO/PARAMETERFILE\n
# Local run: bash bu16s.qsub PATH/TO/PARAMETERFILE\n"
if test -f $1 && ! [ -z $1 ]
then
    PARAMETERS=$1
else
    echo -e $usage
    exit
fi

source $PARAMETERS

# Show welcome
python $SCRIPTSDIR/welcome.py -i $PARAMETERS
echo
echo STARTING AT $(date)
echo

### 0) Truncate if OTU option
if [[ $PIPELINES == *silva99* ]]
then
    bash $SCRIPTSDIR/truncate.sh $PARAMETERS
    # Set input directory to truncated directory
    source $RUNPARAMETERS
    INPUTDIR=$trunc_output
fi

### 1) CREATE QIIME2 ARTIFACT
echo CREATING QIIME ARTIFACT
cmd="python $SCRIPTSDIR/generate_artifact.py -i $INPUTDIR -p $PROJECTNAME -f=$FWD_FMT -r=$REV_FMT -o $INTERMEDIATEDIR"
echo --------------------------------------------------------------------------------------
echo $cmd
echo --------------------------------------------------------------------------------------
echo
eval $cmd


demux_artifact=$INTERMEDIATEDIR/"$PROJECTNAME"_raw.qza
# Add to run parameters
echo "export demux_artifact=$demux_artifact" > $RUNPARAMETERS
echo Saved QIIME artifact to: $demux_artifact
echo

### 2) Trim primers
echo TRIMMING PRIMERS
bash $SCRIPTSDIR/trim.sh $PARAMETERS

if [[ $PIPELINES == *asv* ]]
then
    ### 3) Generate ASVs
    echo GENERATING ASVs
    bash $SCRIPTSDIR/dada2.sh $PARAMETERS

    ### 4) Classify
    echo CLASSIFY ASVs
    bash $SCRIPTSDIR/classify.sh $PARAMETERS
fi

echo
echo PROCESSED DATA IS AVAILABLE AT $OUTPUTDIR
echo FINISHED AT $(date)
